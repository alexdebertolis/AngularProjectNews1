{"ast":null,"code":"var _class;\nimport { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    this.loginUrl = 'http://sanger.dia.fi.upm.es/pui-rest-news/login';\n    this.httpOptions = {\n      headers: new HttpHeaders().set('Content-Type', 'x-www-form-urlencoded')\n    };\n  }\n  isLogged() {\n    return this.user != null;\n  }\n  login(name, pwd) {\n    const usereq = new HttpParams().set('username', name).set('passwd', pwd);\n    return this.http.post(this.loginUrl, usereq).pipe(tap(user => {\n      this.user = user;\n    }));\n  }\n  getUser() {\n    return this.user;\n  }\n  logout() {\n    this.user = null;\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      this.user = null;\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\n_class = LoginService;\n_class.ɵfac = function LoginService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","tap","HttpHeaders","HttpParams","LoginService","constructor","http","loginUrl","httpOptions","headers","set","isLogged","user","login","name","pwd","usereq","post","pipe","getUser","logout","handleError","operation","result","error","console","log","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/alexdebertolis/Downloads/sandbox /src/app/services/login-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../interfaces/user';\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginService {\n  private user: User | null;\n\n  private loginUrl = 'http://sanger.dia.fi.upm.es/pui-rest-news/login';\n\n  private message: string;\n\n  private httpOptions = {\n    headers: new HttpHeaders().set('Content-Type', 'x-www-form-urlencoded'),\n  };\n\n  constructor(private http: HttpClient) {}\n\n  isLogged() {\n    return this.user != null;\n  }\n\n  login(name: string, pwd: string): Observable<User> {\n    const usereq = new HttpParams().set('username', name).set('passwd', pwd);\n\n    return this.http.post<User>(this.loginUrl, usereq).pipe(\n      tap((user) => {\n        this.user = user;\n      }),\n    );\n  }\n\n  getUser() {\n    return this.user;\n  }\n\n  logout() {\n    this.user = null;\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      this.user = null;\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n"],"mappings":";AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAAqBC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;;;AAK1E,OAAM,MAAOC,YAAY;EAWvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARhB,KAAAC,QAAQ,GAAG,iDAAiD;IAI5D,KAAAC,WAAW,GAAG;MACpBC,OAAO,EAAE,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,cAAc,EAAE,uBAAuB;KACvE;EAEsC;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACC,IAAI,IAAI,IAAI;EAC1B;EAEAC,KAAKA,CAACC,IAAY,EAAEC,GAAW;IAC7B,MAAMC,MAAM,GAAG,IAAIb,UAAU,EAAE,CAACO,GAAG,CAAC,UAAU,EAAEI,IAAI,CAAC,CAACJ,GAAG,CAAC,QAAQ,EAAEK,GAAG,CAAC;IAExE,OAAO,IAAI,CAACT,IAAI,CAACW,IAAI,CAAO,IAAI,CAACV,QAAQ,EAAES,MAAM,CAAC,CAACE,IAAI,CACrDjB,GAAG,CAAEW,IAAI,IAAI;MACX,IAAI,CAACA,IAAI,GAAGA,IAAI;IAClB,CAAC,CAAC,CACH;EACH;EAEAO,OAAOA,CAAA;IACL,OAAO,IAAI,CAACP,IAAI;EAClB;EAEAQ,MAAMA,CAAA;IACJ,IAAI,CAACR,IAAI,GAAG,IAAI;EAClB;EAEQS,WAAWA,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MACnC,IAAI,CAACZ,IAAI,GAAG,IAAI;MAChB;MACAa,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACAC,OAAO,CAACC,GAAG,CAAC,GAAGJ,SAAS,YAAYE,KAAK,CAACG,OAAO,EAAE,CAAC;MAEpD;MACA,OAAO3B,EAAE,CAACuB,MAAW,CAAC;IACxB,CAAC;EACH;;SA/CWnB,YAAY;;mBAAZA,MAAY,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAZ3B,MAAY;EAAA4B,OAAA,EAAZ5B,MAAY,CAAA6B,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}